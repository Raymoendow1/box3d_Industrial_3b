V// source: plugin/enclosure/js/enclosure.js\u000a$(function () {\u000a  function EnclosureViewModel(parameters) {\u000a    var self = this;\u000a\u000a    self.pluginName = "enclosure";\u000a\u000a    self.settingsViewModel = parameters[0];\u000a    self.connectionViewModel = parameters[1];\u000a    self.printerStateViewModel = parameters[2];\u000a\u000a    self.rpi_outputs = ko.observableArray();\u000a    self.rpi_inputs = ko.observableArray();\u000a\u000a    self.settingsOpen = false;\u000a\u000a    self.settings_outputs_regular = ko.pureComputed(function () {\u000a      return ko.utils.arrayFilter(self.settingsViewModel.settings.plugins.enclosure.rpi_outputs(), function (item) {\u000a        return (item.output_type() === "regular" && !item.toggle_timer());\u000a      });\u000a    });\u000a    \u000a    self.settings_possible_outputs = ko.pureComputed(function () {\u000a      return ko.utils.arrayFilter(self.settingsViewModel.settings.plugins.enclosure.rpi_outputs(), function (item) {\u000a        return ((item.output_type() === "regular" && !item.toggle_timer()) || item.output_type() === "gcode_output" || item.output_type() === "shell_output");\u000a      });\u000a    });\u000a\u000a    self.rpi_inputs_temperature_sensors = ko.pureComputed(function () {\u000a      return ko.utils.arrayFilter(self.rpi_inputs(), function (item) {\u000a        return (item.input_type() === "temperature_sensor");\u000a      });\u000a    });\u000a\u000a    self.settings_temperature_sensors = ko.pureComputed(function () {\u000a      return ko.utils.arrayFilter(self.settingsViewModel.settings.plugins.enclosure.rpi_inputs(), function (item) {\u000a        return (item.input_type() === "temperature_sensor");\u000a      });\u000a    });\u000a\u000a    self.settings_hum_sensors = ko.pureComputed(function () {\u000a      return ko.utils.arrayFilter(self.settings_temperature_sensors(), function (sensor) {\u000a        return (self.humidityCapableSensor(sensor.temp_sensor_type()));\u000a      });\u000a    });\u000a\u000a    self.use_sudo = ko.observable();\u000a    self.gcode_control = ko.observable();\u000a    self.neopixel_dma = ko.observable();\u000a    self.debug = ko.observable();\u000a    self.debug_temperature_log = ko.observable();\u000a    self.use_board_pin_number = ko.observable();\u000a    self.filament_sensor_gcode = ko.observable();\u000a    self.notification_provider = ko.observable();\u000a    self.notification_event_name = ko.observable();\u000a    self.notification_api_key = ko.observable();\u000a    self.notifications = ko.observableArray([]);\u000a\u000a    self.humidityCapableSensor = function(sensor){\u000a      if (['11', '22', '2302', 'bme280', 'am2320', 'si7021'].indexOf(sensor) >= 0){\u000a        return true;\u000a      }\u000a      return false;\u000a    };\u000a\u000a    self.isRegularOutput = function(index_id){\u000a      return_value = false;\u000a      if (typeof index_id != 'undefined'){\u000a        self.settingsViewModel.settings.plugins.enclosure.rpi_outputs().forEach(function (output) {\u000a          if (output.index_id() == index_id && output.output_type() == "regular") {\u000a            return_value = true;\u000a            return false;\u000a          }\u000a        });\u000a      }\u000a      return return_value;     \u000a    };\u000a\u000a    self.linkedTemperatureControl = function(sensor_index){\u000a      return ko.pureComputed(function () {\u000a        return ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a          if (item.linked_temp_sensor){\u000a            return (item.linked_temp_sensor() == sensor_index && item.output_type() == "temp_hum_control");\u000a          }else{\u000a            return false;\u000a          }\u000a        });\u000a      });\u000a    };\u000a\u000a    self.calculateRowSpan = function(index_id){\u000a      span = self.linkedTemperatureControl(index_id())().length\u000a      return span == 0 ? 1 : span;\u000a    };\u000a\u000a    self.hasAnySensorWithHumidity = function(){\u000a      return_value = false;\u000a      self.rpi_inputs_temperature_sensors().forEach(function (sensor) {\u000a        if (self.humidityCapableSensor(sensor.temp_sensor_type())) {\u000a          return_value = true;\u000a          return false;\u000a        }\u000a      });      \u000a      return return_value;\u000a    };\u000a\u000a    self.hasAnyNavbarOutput = function(){\u000a      return_value = false;\u000a      self.rpi_outputs().forEach(function (output) {\u000a        if ((output.output_type()=="regular" || output.output_type()=="gcode_output") && output.show_on_navbar()) {\u000a          return_value = true;\u000a          return false;\u000a        }\u000a      });      \u000a      return return_value;\u000a    };\u000a\u000a    self.hasAnyNavbarTemperature = function(){\u000a      return_value = false;\u000a      self.rpi_inputs_temperature_sensors().forEach(function (sensor) {\u000a        if (sensor.temp_sensor_navbar()) {\u000a          return_value = true;\u000a          return false;\u000a        }\u000a      });      \u000a      return return_value;\u000a    };\u000a\u000a    self.hasAnyTemperatureControl = function(){\u000a      return_value = false\u000a      self.rpi_outputs().forEach(function (output) {\u000a        if (output.output_type()=="temp_hum_control") {\u000a          return_value = true\u000a          return false;\u000a        } \u000a      });\u000a      return return_value;\u000a    };\u000a\u000a    self.onDataUpdaterPluginMessage = function (plugin, data) {\u000a\u000a      if (typeof plugin == 'undefined'){\u000a        return;\u000a      }\u000a\u000a      if (plugin != "enclosure") {\u000a        return;\u000a      }\u000a\u000a      if(self.settingsOpen){\u000a        return;\u000a      }\u000a\u000a      if (data.hasOwnProperty("sensor_data")) {\u000a        data.sensor_data.forEach(function (sensor_data) {\u000a          var linked_temp_sensor = ko.utils.arrayFilter(self.rpi_inputs_temperature_sensors(), function (temperature_sensor) {\u000a            return (sensor_data['index_id'] == temperature_sensor.index_id());\u000a          }).pop();\u000a          if (linked_temp_sensor){\u000a            linked_temp_sensor.temp_sensor_temp(sensor_data['temperature'])\u000a            linked_temp_sensor.temp_sensor_humidity(sensor_data['humidity'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("set_temperature")) {\u000a        data.set_temperature.forEach(function (set_temperature) {\u000a          var linked_temp_control = ko.utils.arrayFilter(self.rpi_outputs(), function (temp_control) {\u000a            return (set_temperature['index_id'] == temp_control.index_id());\u000a          }).pop();\u000a          if (linked_temp_control) {\u000a            linked_temp_control.temp_ctr_set_value(set_temperature['set_temperature'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("rpi_output_regular")) {\u000a        data.rpi_output_regular.forEach(function (output) {\u000a          var linked_output = ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a            return (output['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_output) {\u000a            linked_output.gpio_status(output['status'])\u000a            linked_output.auto_shutdown(output['auto_shutdown'])\u000a            linked_output.auto_startup(output['auto_startup'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("rpi_output_temp_hum_ctrl")) {\u000a        data.rpi_output_temp_hum_ctrl.forEach(function (output) {\u000a          var linked_output = ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a            return (output['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_output) {\u000a            linked_output.gpio_status(output['status'])\u000a            linked_output.auto_shutdown(output['auto_shutdown'])\u000a            linked_output.auto_startup(output['auto_startup'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("rpi_output_pwm")) {\u000a        data.rpi_output_pwm.forEach(function (output) {\u000a          var linked_output = ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a            return (output['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_output) {\u000a            linked_output.duty_cycle(output['pwm_value'])\u000a            linked_output.auto_shutdown(output['auto_shutdown'])\u000a            linked_output.auto_startup(output['auto_startup'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("rpi_output_neopixel")) {\u000a        data.rpi_output_neopixel.forEach(function (output) {\u000a          var linked_output = ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a            return (output['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_output) {\u000a            linked_output.neopixel_color(output['color'])\u000a            linked_output.auto_shutdown(output['auto_shutdown'])\u000a            linked_output.auto_startup(output['auto_startup'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("rpi_output_ledstrip")) {\u000a        data.rpi_output_ledstrip.forEach(function (output) {\u000a          var linked_output = ko.utils.arrayFilter(self.rpi_outputs(), function (item) {\u000a            return (output['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_output) {\u000a            linked_output.ledstrip_color(output['color'])\u000a            linked_output.auto_shutdown(output['auto_shutdown'])\u000a            linked_output.auto_startup(output['auto_startup'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.hasOwnProperty("filament_sensor_status")) {\u000a        data.filament_sensor_status.forEach(function (filament_sensor) {\u000a          var linked_filament_sensor = ko.utils.arrayFilter(self.rpi_inputs(), function (item) {\u000a            return (filament_sensor['index_id'] == item.index_id());\u000a          }).pop();\u000a          if (linked_filament_sensor) {\u000a            linked_filament_sensor.filament_sensor_enabled(filament_sensor['filament_sensor_enabled'])\u000a          }\u000a        })\u000a      }\u000a\u000a      if (data.is_msg) {\u000a        new PNotify({\u000a          title: "Enclosure",\u000a          text: data.msg,\u000a          type: data.msg_type\u000a        });\u000a      }\u000a    };\u000a\u000a    self.isUser = ko.computed(function () {\u000a      return self.connectionViewModel.loginState.isUser();\u000a    });\u000a\u000a    self.isOperational = ko.computed(function () {\u000a      return self.connectionViewModel.loginState.isUser() && self.printerStateViewModel.isOperational();\u000a    });\u000a\u000a\u000a    self.getCleanTemperature = function (temp) {\u000a      if (temp === undefined || isNaN(parseFloat(temp))) return "-";\u000a      if (temp < 10) return String("off");\u000a      return temp;\u000a    }\u000a\u000a    self.getDutyCycle = function (duty_cycle) {    \u000a      if (duty_cycle === undefined || isNaN(parseFloat(duty_cycle))) return "-";\u000a      if (parseInt(duty_cycle) == 0) return String("off");\u000a      return duty_cycle;\u000a    }\u000a\u000a    self.bindFromSettings = function(){\u000a      self.rpi_outputs(self.settingsViewModel.settings.plugins.enclosure.rpi_outputs());\u000a      self.rpi_inputs(self.settingsViewModel.settings.plugins.enclosure.rpi_inputs());\u000a      self.use_sudo(self.settingsViewModel.settings.plugins.enclosure.use_sudo());\u000a      self.gcode_control(self.settingsViewModel.settings.plugins.enclosure.gcode_control());\u000a      self.neopixel_dma(self.settingsViewModel.settings.plugins.enclosure.neopixel_dma());\u000a      self.debug(self.settingsViewModel.settings.plugins.enclosure.debug());\u000a      self.debug_temperature_log(self.settingsViewModel.settings.plugins.enclosure.debug_temperature_log());\u000a      self.use_board_pin_number(self.settingsViewModel.settings.plugins.enclosure.use_board_pin_number());\u000a      self.filament_sensor_gcode(self.settingsViewModel.settings.plugins.enclosure.filament_sensor_gcode());\u000a      self.notification_provider(self.settingsViewModel.settings.plugins.enclosure.notification_provider());\u000a      self.notification_event_name(self.settingsViewModel.settings.plugins.enclosure.notification_event_name());\u000a      self.notification_api_key(self.settingsViewModel.settings.plugins.enclosure.notification_api_key());\u000a      self.notifications(self.settingsViewModel.settings.plugins.enclosure.notifications());\u000a    };\u000a\u000a    self.onBeforeBinding = function () {\u000a      self.bindFromSettings();\u000a    };\u000a\u000a    self.onSettingsBeforeSave = function() {\u000a      self.bindFromSettings();\u000a    };\u000a\u000a    self.onStartupComplete = function () {\u000a      self.settingsOpen = false;\u000a    };\u000a\u000a    self.onSettingsShown = function () {\u000a      self.settingsOpen = true;\u000a    };\u000a\u000a    self.showColorPicker = function () {\u000a      $('[name=colorpicker]').colorpicker({\u000a        format: 'rgb'\u000a      });\u000a    }\u000a\u000a    self.onSettingsHidden = function () {\u000a      self.showColorPicker();\u000a      self.settingsOpen = false;\u000a    };\u000a\u000a    self.getRegularOutputs = function () {\u000a      return self.rpi_outputs().filter(function (rpi_outputs) {\u000a        return rpi_outputs.output_type == 'regular';\u000a      });\u000a    };\u000a\u000a    self.setTemperature = function (item, form) {\u000a\u000a      var newSetTemperature = item.temp_ctr_new_set_value();\u000a      if (form !== undefined) {\u000a        $(form).find("input").blur();\u000a      }\u000a\u000a      if(self.isNumeric(newSetTemperature)){\u000a        var request = {set_temperature:newSetTemperature, index_id:item.index_id()};\u000a\u000a        $.ajax({\u000a          url: self.buildPluginUrl("/setEnclosureTempHum"),\u000a          type: "GET",\u000a          dataType: "json",\u000a          data: request,\u000a          success: function (data) {         \u000a            item.temp_ctr_new_set_value("");\u000a            item.temp_ctr_set_value(newSetTemperature);\u000a            self.getUpdateUI();  \u000a          },\u000a          error: function (textStatus, errorThrown) {\u000a            new PNotify({\u000a              title: "Enclosure",\u000a              text: "Error setting temperature",\u000a              type: "error"\u000a            });\u000a        }\u000a        });\u000a      }else{\u000a        new PNotify({\u000a          title: "Enclosure",\u000a          text: "Invalid set temperature",\u000a          type: "error"\u000a        });\u000a      } \u000a    };\u000a\u000a    self.addRpiOutput = function () {\u000a\u000a      var arrRelaysLength = self.settingsViewModel.settings.plugins.enclosure.rpi_outputs().length;\u000a\u000a      var nextIndex = arrRelaysLength == 0 ? 1 : self.settingsViewModel.settings.plugins.enclosure.rpi_outputs()[arrRelaysLength - 1].index_id() + 1;\u000a\u000a      self.settingsViewModel.settings.plugins.enclosure.rpi_outputs.push({\u000a        index_id: ko.observable(nextIndex),\u000a        label: ko.observable("Ouput " + nextIndex),\u000a        output_type: ko.observable("regular"),\u000a        shell_script: ko.observable(""),\u000a        gpio_pin: ko.observable(0),\u000a        gpio_status: ko.observable(false),\u000a        hide_btn_ui: ko.observable(false),\u000a        active_low: ko.observable(true),\u000a        pwm_temperature_linked: ko.observable(false),\u000a        toggle_timer: ko.observable(false),\u000a        toggle_timer_on: ko.observable(0),\u000a        toggle_timer_off: ko.observable(0),\u000a        startup_with_server: ko.observable(false),\u000a        auto_startup: ko.observable(false),\u000a        controlled_io: ko.observable(0),\u000a        controlled_io_set_value: ko.observable("Low"),\u000a        startup_time: ko.observable(0),\u000a        auto_shutdown: ko.observable(false),\u000a        shutdown_on_failed: ko.observable(false),\u000a        shutdown_time: ko.observable(0),\u000a        linked_temp_sensor: ko.observable(""),\u000a        alarm_set_temp: ko.observable(0),\u000a        temp_ctr_type: ko.observable("heater"),\u000a        temp_ctr_deadband: ko.observable(0),\u000a        temp_ctr_set_value: ko.observable(0),\u000a        temp_ctr_new_set_value: ko.observable(""),\u000a        temp_ctr_default_value: ko.observable(0),\u000a        temp_ctr_max_temp: ko.observable(0),\u000a        pwm_frequency: ko.observable(50),\u000a        pwm_status: ko.observable(50),\u000a        duty_cycle: ko.observable(0),\u000a        duty_a: ko.observable(0),\u000a        duty_b: ko.observable(0),\u000a        temperature_a: ko.observable(0),\u000a        temperature_b: ko.observable(0),\u000a        default_duty_cycle: ko.observable(0),\u000a        new_duty_cycle: ko.observable(""),\u000a        neopixel_color: ko.observable("rgb(0,0,0)"),\u000a        default_neopixel_color: ko.observable(""),\u000a        new_neopixel_color: ko.observable(""),\u000a        neopixel_count: ko.observable(0),\u000a        neopixel_brightness: ko.observable(255),\u000a        ledstrip_color: ko.observable("rgb(0,0,0)"),\u000a        default_ledstrip_color: ko.observable(""),\u000a        new_ledstrip_color: ko.observable(""),\u000a        ledstrip_gpio_clk: ko.observable(""),\u000a        ledstrip_gpio_dat: ko.observable(""),\u000a        microcontroller_address: ko.observable(0),\u000a        gcode: ko.observable(""),\u000a        show_on_navbar: ko.observable(false)\u000a      });\u000a\u000a    };\u000a\u000a    self.removeRpiOutput = function (data) {\u000a      self.settingsViewModel.settings.plugins.enclosure.rpi_outputs.remove(data);\u000a    };\u000a\u000a    self.addRpiInput = function () {\u000a\u000a      var arrRelaysLength = self.settingsViewModel.settings.plugins.enclosure.rpi_inputs().length;\u000a\u000a      var nextIndex = arrRelaysLength == 0 ? 1 : self.settingsViewModel.settings.plugins.enclosure.rpi_inputs()[arrRelaysLength - 1].index_id() + 1;\u000a\u000a      self.settingsViewModel.settings.plugins.enclosure.rpi_inputs.push({\u000a        index_id: ko.observable(nextIndex),\u000a        label: ko.observable("Input " + nextIndex),\u000a        input_type: ko.observable("gpio"),\u000a        gpio_pin: ko.observable(0),\u000a        input_pull_resistor: ko.observable("input_pull_up"),\u000a        temp_sensor_type: ko.observable("DS18B20"),\u000a        temp_sensor_address: ko.observable(""),\u000a        temp_sensor_temp: ko.observable(""),\u000a        temp_sensor_humidity: ko.observable(""),\u000a        ds18b20_serial: ko.observable(""),\u000a        use_fahrenheit: ko.observable(false),\u000a        action_type: ko.observable("output_control"),\u000a        controlled_io: ko.observable(""),\u000a        controlled_io_set_value: ko.observable("low"),\u000a        edge: ko.observable("fall"),\u000a        printer_action: ko.observable("filament"),\u000a        temp_sensor_navbar: ko.observable(true),\u000a        filament_sensor_timeout: ko.observable(120),\u000a        filament_sensor_enabled: ko.observable(true)\u000a      });\u000a    };\u000a\u000a    self.removeRpiInput = function (definition) {\u000a      self.settingsViewModel.settings.plugins.enclosure.rpi_inputs.remove(definition);\u000a    };\u000a\u000a    self.turnOffHeater = function (item) {\u000a      var request = { set_temperature: 0, index_id: item.index_id() };\u000a      $.ajax({\u000a        url: self.buildPluginUrl("/setEnclosureTempHum"),\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        success: function (data) {\u000a          self.getUpdateUI();  \u000a        }\u000a      });\u000a    };\u000a\u000a    self.clearGPIOMode = function () {\u000a      $.ajax({\u000a        url: self.buildPluginUrl("/clearGPIOMode"),\u000a        type: "GET",\u000a        dataType: "json",\u000a        success: function (data) {\u000a          new PNotify({\u000a            title: "Enclosure",\u000a            text: "GPIO Mode cleared successfully",\u000a            type: "success"\u000a          });\u000a        }\u000a      });\u000a    };\u000a\u000a    self.getUpdateUI = function () {\u000a      $.ajax({\u000a        url: self.buildPluginUrl("/updateUI"),\u000a        type: "GET"\u000a      });\u000a    };\u000a\u000a    self.handleIO = function (item, form) {\u000a\u000a      var request = {\u000a        "status": !item.gpio_status(),\u000a        "index_id": item.index_id()\u000a      };\u000a\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/setIO"),\u000a        success: function (data) {\u000a          self.getUpdateUI();\u000a        }\u000a      });\u000a    };\u000a\u000a    self.handleGcode = function (item, form) {\u000a      var request = {\u000a        "index_id": item.index_id()\u000a      };\u000a\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/sendGcodeCommand")\u000a      });\u000a    };\u000a\u000a    self.handleShellOutput = function (item, form) {\u000a      var request = {\u000a        "index_id": item.index_id()\u000a      };\u000a\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/sendShellCommand")\u000a      });\u000a    };\u000a\u000a    self.switchAutoStartUp = function (item) {\u000a\u000a      var request = {\u000a        "status": !item.auto_startup(),\u000a        "index_id": item.index_id()\u000a      };\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/setAutoStartUp"),\u000a        success: function (data) {\u000a          self.getUpdateUI();\u000a        }\u000a      });\u000a    };\u000a\u000a    self.switchAutoShutdown = function (item) {\u000a      var request = {\u000a        "status": !item.auto_shutdown(),\u000a        "index_id": item.index_id()\u000a      };\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/setAutoShutdown"),\u000a        success: function (data) {\u000a          self.getUpdateUI();\u000a        }\u000a      });\u000a    };\u000a\u000a    self.switchFilamentSensor = function (item) {\u000a      var request = {\u000a        "status": !item.filament_sensor_enabled(),\u000a        "index_id": item.index_id()\u000a      };\u000a      $.ajax({\u000a        type: "GET",\u000a        dataType: "json",\u000a        data: request,\u000a        url: self.buildPluginUrl("/setFilamentSensor"),\u000a        success: function (data) {\u000a          self.getUpdateUI();\u000a        }\u000a      });\u000a    };\u000a\u000a    self.handlePWM = function (item) {\u000a      var pwm_value = item.new_duty_cycle();\u000a\u000a      pwm_value = parseInt(pwm_value);\u000a\u000a      if (pwm_value < 0 || pwm_value > 100 || isNaN(pwm_value)) {\u000a        item.new_duty_cycle("")\u000a        new PNotify({\u000a          title: "Enclosure",\u000a          text: "Duty Cycle value needs to be between 0 and 100!",\u000a          type: "error"\u000a        });\u000a      } else {\u000a        var request = { new_duty_cycle: pwm_value, index_id: item.index_id() };\u000a        $.ajax({\u000a          type: "GET",\u000a          dataType: "json",\u000a          data: request,\u000a          url: self.buildPluginUrl("/setPWM"),\u000a          success: function (data) {\u000a            item.new_duty_cycle("");\u000a            item.duty_cycle(pwm_value);\u000a            self.getUpdateUI();\u000a          }\u000a        });\u000a      }\u000a    };\u000a\u000a    self.handleNeopixel = function (item) {\u000a\u000a      var index = item.index_id() ;\u000a      var or_tempStr = item.new_neopixel_color();\u000a      var tempStr = or_tempStr.replace("rgb(", "");\u000a\u000a      var r = parseInt(tempStr.substring(0, tempStr.indexOf(",")));\u000a      tempStr = tempStr.slice(tempStr.indexOf(",") + 1);\u000a      var g = parseInt(tempStr.substring(0, tempStr.indexOf(",")));\u000a      tempStr = tempStr.slice(tempStr.indexOf(",") + 1);\u000a      var b = parseInt(tempStr.substring(0, tempStr.indexOf(")")));\u000a\u000a      if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255 || isNaN(r) || isNaN(g) || isNaN(b)) {\u000a        new PNotify({\u000a          title: "Enclosure",\u000a          text: "Color needs to follow the format rgb(value_red,value_green,value_blue)!",\u000a          type: "error"\u000a        });\u000a      } else {\u000a        $.ajax({\u000a          type: "GET",\u000a          dataType: "json",\u000a          data: {\u000a            "index_id": index,\u000a            "red": r,\u000a            "green": g,\u000a            "blue": b\u000a          },\u000a          url: self.buildPluginUrl("/setNeopixel"),\u000a          success: function (data) {\u000a            item.new_neopixel_color("");\u000a            self.getUpdateUI();\u000a          }\u000a        });\u000a      }\u000a    };\u000a\u000a    self.handleLedstripColor = function (item) {\u000a      var index = item.index_id() ;\u000a      var or_tempStr = item.new_ledstrip_color();\u000a      var tempStr = or_tempStr.replace("rgb(", "");\u000a\u000a      var r = parseInt(tempStr.substring(0, tempStr.indexOf(",")));\u000a      tempStr = tempStr.slice(tempStr.indexOf(",") + 1);\u000a      var g = parseInt(tempStr.substring(0, tempStr.indexOf(",")));\u000a      tempStr = tempStr.slice(tempStr.indexOf(",") + 1);\u000a      var b = parseInt(tempStr.substring(0, tempStr.indexOf(")")));\u000a      if (r < 0 || r > 255 || g < 0 || g > 255 || b < 0 || b > 255 || isNaN(r) || isNaN(g) || isNaN(b)) {\u000a        new PNotify({\u000a          title: "Enclosure",\u000a          text: "Color needs to follow the format rgb(value_red,value_green,value_blue)!",\u000a          type: "error"\u000a        });\u000a      } else {\u000a        $.ajax({\u000a          type: "GET",\u000a          dataType: "json",\u000a          data: {\u000a            "index_id": index,\u000a            "rgb": or_tempStr\u000a          },\u000a          url: self.buildPluginUrl("/setLedstripColor"),\u000a          success: function (data) {\u000a            item.new_ledstrip_color("");\u000a            self.getUpdateUI();\u000a          }\u000a        });\u000a      }\u000a    };\u000a\u000a    self.isNumeric = function (n) {\u000a      return !isNaN(parseFloat(n)) && isFinite(n);\u000a    };\u000a\u000a    self.buildPluginUrl = function (path) {\u000a      return window.PLUGIN_BASEURL + self.pluginName + path;\u000a    };\u000a  }\u000a\u000a  OCTOPRINT_VIEWMODELS.push({\u000a    construct: EnclosureViewModel,\u000a    // ViewModels your plugin depends on, e.g. loginStateViewModel, settingsViewModel, ...\u000a    dependencies: ["settingsViewModel", "connectionViewModel", "printerStateViewModel"],\u000a    // Elements to bind to, e.g. #settings_plugin_tasmota-mqtt, #tab_plugin_tasmota-mqtt, ...\u000a    elements: ["#tab_plugin_enclosure", "#settings_plugin_enclosure", "#navbar_plugin_enclosure_1", "#navbar_plugin_enclosure_2"]\u000a  });\u000a\u000a});\u000a;\u000a
p0
.